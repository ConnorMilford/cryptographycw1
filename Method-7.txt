
P is a safe prime. Since q = (p - 1) // 2 is also prime.

Therefore we can solve for the discrete logarithm of q not p cutting search space in half.
This still leaves us with a huge number however.

g^x = a mod p. 

find order of g. which is 1023 bits (p/2). so baby step giant step does not work.

using the isSafePrime function, which also returns a list of factors in the case of p; 2, 40898502245051874122316751553312467715868104870502135871741373173670955687338215657768424827017269527549076378700643938936112407960195096600210341924819584633356877168040889598679859304065198208029155613160569891138001460385084535051069948194131475494728251250417776593891845950604228127787880763888605034712688635367211239956731880339996165538521666417589705123937116738025489425026369333965460935506456875855451948332478373078678888449064132101681466496060187168090865147103380078681284056918319517696233060848009963341679493886493210520862520130323115547585686360735217029495011817066685532817920778686132815031821
this function also returns whether or not the number is a safe prime which it is.

Since the only factors of p are 2 and the above p/2 it means that a pohlig-hellman attack is not feasible.  

Therefore we need to rely on the fact that we know that the plaintext is one of two messages. 20190 or 272991.

    since c= K ​⋅ m mod p
    and we have c. we can therefore compute the modular inverse of each plaintext.
        K congruent to inverse m * c % p.
    
We cannot categorically verify which message was sent from this information since both keys when decoding C
 result in valid plaintexts, "BUY" or "SELL".

However we can analyse the keys that were returned:
    Message 1: 20190
    Key 1: 73717804608724707690518212868720056859056704862910776513875089776348907860476283710893151880063898939939959696020002812580276465422225058047045028562269585678714053701400503542799688360207814728143200719699727681457677146423837631121689690368956465574716405401782120036982961989977377664998194337108266573989165368472753835270134729442358911468948977763060903074334771784446786906344568572747875668333769782096338242819815823669369486450681662188069715451550093770245559064957643005005628915462205720210542579218994938653128231583044461368441425796276699336606665619262259905714898525081370990312529684581895459189751 

    Message 2: 272991
    Key 2: 73000632157434350015367724178345696897861477201719798788686811776346290779503066002303845360340555311715789705835267072532627082535085948975190673877040554362607749318654755304107116907049302308884046685678731577690722580740327177811844085741018766864528937715328880597141539235367741853763684777026548808422107138877441508917273695717504743950916238003206609450608593282203300466452323114332673144906125338413089888600307703990633363150431707950279900959535037209363659430482610813640619208143441228289055801170510559113852626940918127197721690506670152515062154072609561270836682342103409220777325345313938146060964

From problem 6, which uses the same parameters we can take the encoded integer of c2
 and compare it with these keys and the correct key from problem 6.

 "K = 64610768241945442473143647736286110811847728909995772183738878377682089709097566206433901206319502494043575455252252976340509074260675580359196833993207830840896191774107675852779742890012625377417435047520552248400328130230055319489435848498734961570069904551701970046350312851530717108998008147935082402458085686016556848870159513008050408159367430405049586018575916332567183108406569547622750697445670239098770329674536754453772458036632380203270288809384722735992920521114816891875580612873134895115998815314963688078482617937340866433410654948739885257161265409496206504223951505256276848559642083407533152415346"


Alice has sent the message Sell.




